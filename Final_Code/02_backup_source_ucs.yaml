---
- name: Backup UCS with Declaratives
  hosts: lb
  connection: httpapi
  gather_facts: false

  vars:
    ansible_httpapi_password: "{{ ansible_password }}"
    ansible_network_os: f5networks.f5_bigip.bigip
    ansible_httpapi_use_ssl: true
    ansible_httpapi_validate_certs: false
    ansible_httpapi_port: "{{ server_port }}"
    ansible_command_timeout: 300
    ansible_httpapi_use_proxy: false


  tasks:

    - name: Get timestamp from the system
      ansible.builtin.shell: "date +%Y-%m-%d%H-%M-%S"
      register: tstamp
      delegate_to: localhost

    - name: Set variables
      ansible.builtin.set_fact:
        cur_date: "{{ tstamp.stdout[0:10] }}"
        cur_time: "{{ tstamp.stdout[10:] }}"

    - name: Create a new UCS
      f5networks.f5_bigip.bigip_ucs_fetch:
        src: "{{ inventory_hostname }}-{{ cur_date }}-{{ cur_time }}.ucs"
        dest: "{{ inventory_hostname }}-{{ cur_date }}-{{ cur_time }}.ucs"
      register: task

    - name: Debug task
      ansible.builtin.debug:
        var: task

    - name: Wait for Backup Task to complete
      ansible.builtin.uri:
        url: "https://{{ ansible_host }}/mgmt/tm/task/sys/ucs/{{ task.task_id }}"
        method: GET
        return_content: true
        status_code: 200
        force_basic_auth: true
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        validate_certs: false
      register: atc_backup_status
      until: atc_backup_status is success
      retries: 30
      delay: 30
      delegate_to: localhost
      when: task.changed

    - name: Download an existing UCS
      f5networks.f5_bigip.bigip_ucs_fetch:
        src: "{{ inventory_hostname }}-{{ cur_date }}-{{ cur_time }}.ucs"
        dest: "/tmp/{{ inventory_hostname }}-{{ cur_date }}-{{ cur_time }}.ucs"


- name: Ansible Copy File
  hosts: bastion-backup
  tasks:
    - name: Copy from Local to Remote location
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ item }}"
        mode: '0755'
      with_fileglob: "/tmp/*.ucs"
