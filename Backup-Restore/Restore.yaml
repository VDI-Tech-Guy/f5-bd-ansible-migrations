---

- name: Copy Inventory File For Tenant Creation
  hosts: bastion-backup
  tasks:

    - name: use find to get the files list which you want to copy/fetch
      ansible.builtin.find: 
        paths: /tmp/
        patterns: "*.ucs"
      register: UCS_fetch

    - name: use fetch to get the files #NEED TO FIX FOR SPECIFIC UCS FILE 
      ansible.builtin.fetch:
        src: "{{ item.path }}"
        dest: /tmp/
        flat: yes
      with_items: "{{ UCS_fetch.files }}"


- name: Restore UCS to Destination
  hosts: velos-lb
  connection: httpapi
  gather_facts: false

  vars:
    ansible_httpapi_password: "{{ ansible_password }}"
    ansible_network_os: f5networks.f5_bigip.bigip
    ansible_httpapi_use_ssl: yes
    ansible_httpapi_validate_certs: no
    ansible_httpapi_port: "{{ server_port }}"
    ansible_command_timeout: 300
    ansible_httpapi_use_proxy: no


  tasks:

    - name: use find to get the files list which you want to copy/fetch
      ansible.builtin.find: 
        paths: /tmp/
        patterns: "*.ucs"
      register: UCS_fetch
      delegate_to: localhost

    - name: Upload UCS
      f5networks.f5_bigip.bigip_ucs:
        ucs: "{{ UCS_fetch.files[0].path }}"
        state: present
      register: restore_task_upload

    - name: Run UCS Restore with Platform Migrate (via BIG-IP Command)
      f5networks.f5_bigip.bigip_command:
        commands:
          - "tmsh load /sys ucs {{ UCS_fetch.files[0].path.split('/')[2] }} no-license platform-migrate"
        use_ssh: true
      become: true
      ansible_become_password: "{{ ansible_password }}"
      register: restore_task
      ignore_errors: true

    - name: Debug restore_task
      ansible.builtin.debug:
        var: restore_task

    # - name: Wait for Backup Task to complete
    #   ansible.builtin.uri:
    #     url: "https://{{ ansible_host }}/mgmt/tm/task/sys/ucs/{{ restore_task.task_id }}"
    #     method: GET
    #     return_content: true
    #     status_code: 200
    #     force_basic_auth: true
    #     user: "{{ ansible_user }}"
    #     password: "{{ ansible_password }}"
    #     validate_certs: false
    #   register: atc_Backup_status
    #   until: atc_Backup_status is success
    #   retries: 30
    #   delay: 30
    #   delegate_to: localhost
    #   when: task.changed
